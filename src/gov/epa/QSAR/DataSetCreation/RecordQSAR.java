package gov.epa.QSAR.DataSetCreation;

import java.lang.reflect.Field;
import java.util.ArrayList;

import org.apache.commons.text.StringEscapeUtils;

import gov.epa.api.ExperimentalConstants;
import gov.epa.exp_data_gathering.parse.ExperimentalRecord;
import gov.epa.exp_data_gathering.parse.ParseUtilities;

public class RecordQSAR {
	
	public String id_physchem;//	Autonumbered record number for physchem data (generated by database later)
	public String id_record_source;//	Record number for reference that the physchem data came from (generated by database later- may only need for records from journal articles)
	
	public boolean usable;
	public String reason;
	
	//ID fields:
	public String casrn;//Chemical abstracts service number (only if provided by the reference)
	public String einecs;
	public String chemical_name;//	Most systematic name (only if provided in the reference)
	public String smiles;//Simplified Molecular Input Line Entry System for molecular structure (only if provided in the reference)
	public String source_name;
	public String original_source_name;
	public String url;
	public String date_accessed;
	
	public String property_name;//	Name of the property (use  "options_property_names" lookup table to consistently populate the field)

	public String property_value_exp;// Point estimate and units
	public String property_value_string;//original string
	
	public Double property_value_point_estimate_exp;
	public String property_value_units_exp;
	
	public Double property_value_point_estimate_qsar;// Point estimate of the property (when a single value is given)
	public String property_value_units_qsar;//The units for the property value (convert to defined values in ExperimentalConstants class)
	
	public String pressure_mmHg;
	public Double temperature_C;
	public String pH;
	
	//DSSTox fields:
	
	public String DSSTox_Substance_Id;//SID
	public String DSSTox_Structure_Id;//CID
	public String Substance_Name;
	public String Substance_CASRN;
	public String Substance_Type;
	public String Substance_Note;
	public String Structure_SMILES;
	public String Structure_InChI;
	public String Structure_InChIKey;
	public String Structure_Formula;
	public Double Structure_MolWt;
	public String Structure_SMILES_2D_QSAR;
	public String Structure_InChIKey_QSAR_Ready;
	public String Structure_InChIKey1_QSAR_Ready;
	public String comboID;
	
	public final static String [] outputFieldNames = {
			"property_name","source_name",
			"id_physchem",
			"usable",
			"reason",			
			"casrn",
			"einecs",
			"chemical_name",
			"smiles", 
			"DSSTox_Substance_Id","DSSTox_Structure_Id",
			"Substance_Name", "Substance_CASRN", "Substance_Type", "Substance_Note", "Structure_SMILES",
			"Structure_InChI", "Structure_InChIKey", "Structure_Formula", "Structure_MolWt", "Structure_SMILES_2D_QSAR",
			"Structure_InChIKey_QSAR_Ready", "Structure_InChIKey1_QSAR_Ready",			
			"property_value_exp",
			"property_value_point_estimate_qsar",
			"property_value_units_qsar",
			"pressure_mmHg",
			"temperature_C",
			"pH",
			"url",
			"date_accessed"};
	
	public final static String [] outputFieldNamesDB = {
			"property_name","source_name",
			"id_physchem",
			"casrn",
			"chemical_name",
			"smiles", 
			"DSSTox_Substance_Id","DSSTox_Structure_Id",
			"Substance_Name", "Substance_CASRN", "Substance_Type", "Substance_Note", "Structure_SMILES",
			"Structure_InChI", "Structure_InChIKey", "Structure_Formula", "Structure_MolWt", "Structure_SMILES_2D_QSAR",
			"Structure_InChIKey_QSAR_Ready", "Structure_InChIKey1_QSAR_Ready",			
			"property_value_exp",
			"property_value_point_estimate_qsar",
			"property_value_units_qsar",
			"pressure_mmHg",
			"temperature_C",
			"pH",
			"url",
			"date_accessed"};
	
	
	public RecordQSAR (ExperimentalRecord er) {
		
		usable = true;
		
		id_physchem = er.id_physchem;
		id_record_source = er.id_record_source;
		
		casrn = er.casrn;
		einecs = er.einecs;
		chemical_name = er.chemical_name;
		smiles = er.smiles;
		DSSTox_Substance_Id = er.dsstox_substance_id;
		source_name = er.source_name;
		original_source_name=er.original_source_name;
		url = er.url;
		date_accessed = er.date_accessed;
		property_name = er.property_name;
		pressure_mmHg = er.pressure_mmHg;
		temperature_C = er.temperature_C;
		pH = er.pH;
		
		property_value_units_exp=er.property_value_units_final;
		property_value_point_estimate_exp=er.property_value_point_estimate_final == null ? er.rangeAverage()
				: er.property_value_point_estimate_final;
		
		property_value_exp = property_value_point_estimate_exp+" "+property_value_units_exp;		
		property_value_string=er.property_value_string;
	}
	
	public RecordQSAR() {
		// TODO Auto-generated constructor stub
	}

	public boolean setQSARUnits() {
				
		if (property_name.contentEquals(ExperimentalConstants.strWaterSolubility)) {//Need to do it by property so can detect bad data points which are probably a different property			
			return convertToNegLog10_M();			
		} else {
//			System.out.println("need qsar units conversion for "+property_name);
			
//			else if (property_value_units_exp.equals(ExperimentalConstants.str_ppm)) {//TODO might have different conversion depending on the property
//				property_value_point_estimate_qsar = -Math.log10((property_value_point_estimate_exp/24.45)*0.001/1000.0);
//				property_value_units_qsar = "-log10(mol/L)";
//				return true;

			usable=false;
			reason="can't convert units";
			return false;
		}
	}

	private boolean convertToNegLog10_M() {
		if (property_value_units_exp.equals(ExperimentalConstants.str_M)) {
			property_value_point_estimate_qsar = -Math.log10(property_value_point_estimate_exp);
			property_value_units_qsar = "-log10(mol/L)";
			return true;
		}	
		
		if (Structure_MolWt==null) {
			System.out.println("Error: Cannot convert units before looking up DSSToxData.");
			usable=false;
			reason="MW is missing";
			return false;
		}
		
		if (property_value_point_estimate_exp==0) {
			property_value_point_estimate_qsar=null;
			usable=false;
			reason="value is zero";
			return false;
		}
		if (property_value_units_exp.equals(ExperimentalConstants.str_mg_L)) {
			property_value_point_estimate_qsar = -Math.log10(property_value_point_estimate_exp/1000.0/Structure_MolWt);
			property_value_units_qsar = "-log10(mol/L)";
			return true;

		} else if (property_value_units_exp.equals(ExperimentalConstants.str_g_L)) {
				property_value_point_estimate_qsar = -Math.log10(property_value_point_estimate_exp/Structure_MolWt);
				property_value_units_qsar = "-log10(mol/L)";
				return true;
		
		} else {
			System.out.println("need qsar units conversion for "+property_value_units_exp);
			usable=false;
			reason="can't convert units";
			return false;
		}
	}

	
	public void setComboID(String del) {
		String CAS=casrn;
		if (CAS==null || CAS.trim().isEmpty()) CAS="casrn=null";//need placeholder so dont get spurious match in chemreg
		else {
			CAS=ParseUtilities.fixCASLeadingZero(CAS);
		}
		String name=StringEscapeUtils.escapeJava(chemical_name);
		
		String EINECS=einecs;
		if (EINECS==null || EINECS.trim().isEmpty()) EINECS="einecs=null";//need placeholder so dont get spurious match in chemreg
		EINECS=EINECS.trim();
		
		if (name==null || name.trim().isEmpty()) name="name=null";//need placeholder so dont get spurious match in chemreg
		name=name.trim();
		

		String SMILES=smiles;
		if (SMILES==null || SMILES.trim().isEmpty()) SMILES="smiles=null";//need placeholder so dont get spurious match in chemreg
		SMILES=SMILES.trim();
		
		//TODO omit chemicals where smiles indicates bad element....
		
		comboID=CAS+del+EINECS+del+name+del+SMILES;
		
	}
	
	public void assignValue(String fieldName,String fieldValue) {
		if (fieldValue.isEmpty()) return;
		Field myField;
		try {
			myField = getClass().getDeclaredField(fieldName);
			if (myField.getType().getName().contentEquals("boolean")) {
				myField.setBoolean(this, Boolean.parseBoolean(fieldValue));
			} else if (myField.getType().getName().contentEquals("double")) {
				myField.setDouble(this, Double.parseDouble(fieldValue));
			} else if (myField.getType().getName().contentEquals("int")) {
				myField.setInt(this, Integer.parseInt(fieldValue));
			} else if (myField.getType().getName().contentEquals("java.lang.Double")) {
				Double dval=Double.parseDouble(fieldValue);						
				myField.set(this, dval);
			} else if (myField.getType().getName().contentEquals("java.lang.Integer")) {
				Integer ival=Integer.parseInt(fieldValue);
				myField.setInt(this,ival);
			} else if (myField.getType().getName().contentEquals("java.lang.String")) {
				myField.set(this, fieldValue);
			} else {
				System.out.println("Need to implement"+myField.getType().getName());
			}					
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	public Object getValue(String fieldName) {
		

		
		Field myField;
		try {
			myField = getClass().getDeclaredField(fieldName);
						
			if (myField.getType().getName().contentEquals("boolean")) {
				return myField.getBoolean(this);
			} else if (myField.getType().getName().contentEquals("double")) {
				return Double.valueOf(myField.getDouble(this));
			} else if (myField.getType().getName().contentEquals("int")) {
				return Integer.valueOf(myField.getInt(this));
			} else if (myField.getType().getName().contentEquals("java.lang.Double")) {
				return myField.get(this);										
			} else if (myField.getType().getName().contentEquals("java.lang.Integer")) {
				return myField.get(this);				
			} else if (myField.getType().getName().contentEquals("java.lang.String")) {
				return myField.get(this);
			} else {
				System.out.println("Need to implement"+myField.getType().getName());
				return null;
			}					
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} 

	}
	
	/**
	 * Flexible method that converts ExperimentalRecord to string array (useful for writing to excel and sqlite)
	 *  
	 * @param fieldNames
	 * @return
	 */
	public String [] toStringArray(String [] fieldNames) {

		String Line = "";

		String [] array=new String [fieldNames.length];

		for (int i = 0; i < fieldNames.length; i++) {
			try {

				Field myField = this.getClass().getDeclaredField(fieldNames[i]);

				String val=null;
				String type=myField.getType().getName();

				
				switch (type) {
				
				case "java.lang.String":
					if (myField.get(this)==null) val="";	
					else val=myField.get(this)+"";						
					val=ParseUtilities.reverseFixChars(StringEscapeUtils.unescapeHtml4(val.replaceAll("(?<!\\\\)'", "\'")));					
					break;
				
				case "java.lang.Double":
					if (myField.get(this)==null) val="";	
					else {
						val=ParseUtilities.formatDouble((Double)myField.get(this));						
					}										
					break;
					
				case "java.lang.Integer":
				case "java.lang.Boolean": 							
					if (myField.get(this)==null) val="";	
					else val=myField.get(this)+"";						
					break;					
				case "boolean":
					val=myField.getBoolean(this)+"";
					break;
				case "int":
					val=myField.getInt(this)+"";
					break;
				case "double": 
					val=myField.getDouble(this)+"";

				}

				val=val.trim();
				val=val.replace("\r\n","<br>");
				val=val.replace("\n","<br>");

				array[i]=val;

			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		return array;
	}

	
	
}
