package gov.epa.api;

import java.lang.reflect.Field;
import java.util.ArrayList;

public class ExperimentalRecord {

	int physchem_id;//	Autonumbered record number for physchem data (generated by database later)
	int record_source_id;//	Record number for reference that the physchem data came from (generated by database later- may only need for records from journal articles)

	String casrn;//Chemical abstracts service number (only if provided by the reference)
	String chemical_name;//	Most systematic name (only if provided in the reference)
	String synonyms;//	Pipe deliminated synonyms (only if provided in the reference)
	String smiles;//Simplified Molecular Input Line Entry System for molecular structure (only if provided in the reference)
	String property_name;//	Name of the property (use  "options_property_names" lookup table to consistently populate the field)
	Double property_value_min;//The minimum value of a property when a range of values is given
	Double property_value_max;//The maximum value of a property when a range of values is given
	Double property_value_point_estimate;// Point estimate of the property (when a single value is given)
	String property_value_units;//The units for the property value (convert to defined values in ExperimentalConstants class)
	Double temperature_C;//The temperature in C that the property is measured at (vapor pressure might be given at 23 C for example)
	Double pressure_kPa;//The pressure in kPa that the property is measured at (important for boiling points for example)
	String measurement_method;//	The experimental method used to measure the property
	String note;//	Any additional note

	//TODO possibly add property_value_units_original and property_value_point_estimate_original? When do we want to do units conversion?
	
	String url;
	String source_name;//use Experimental constants
	String date_accessed;//use Experimental constants
	
	//TODO do we need parent url too? sometimes there are several urls we have to follow along the way to get to the final url

	public final static String [] allFieldNames= {"casrn","chemical_name","synonyms","smiles","property_name",
			"property_value_min","property_value_max","property_value_point_estimate","property_value_units",
			"temperature_C","pressure_kPa","measurement_method","note","url","source_name","date_accessed"};

	
	public String toString(String del) {
		// TODO Auto-generated method stub
		return toString(del,allFieldNames);
	}


	//convert to string by reflection:
	public String toString(String del,String [] fieldNames) {

		String Line = "";
		
		for (int i = 0; i < fieldNames.length; i++) {
			try {


				Field myField = this.getClass().getDeclaredField(fieldNames[i]);

				String val=null;

				//						System.out.println(myField.getType().getName());

				if (myField.getType().getName().contains("Double")) {
					if (myField.get(this)==null) {
						val="";	
					} else {
						val=(Double)myField.get(this)+"";
					}

				} else if (myField.getType().getName().contains("Integer")) {
					if (myField.get(this)==null) {
						val="";	
					} else {
						val=(Integer)myField.get(this)+"";
					}

				} else {//string
					if (myField.get(this)==null) {
						//								val="\"\"";
						val="";
					} else {
						//								val="\""+(String)myField.get(this)+"\"";
						val=(String)myField.get(this);
					} 
				}

				val=val.replace("\r\n","<br>");
				val=val.replace("\n","<br>");

				if (val.contains(del)) {
					System.out.println("***WARNING***"+this.casrn+"\t"+fieldNames[i]+"\t"+val+"\thas delimiter");
				}

				Line += val;
				if (i < fieldNames.length - 1) {
					Line += del;
				}


			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		return Line;
	}


}
